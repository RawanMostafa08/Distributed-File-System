syntax = "proto3";

option go_package = "/";

package Upload;

message Empty {}


//upload methods
message UploadRequestBody {
    string master_address = 1;
    string client_address = 2;
}

message UploadResponseBody {
    string selected_port = 1;
    string data_node_IP = 2;
}

message UploadFileRequestBody {
    string node_address = 1;
    bytes file_data = 2;
    string file_name = 3;
    int64 file_size = 4;
    string client_address = 5;
}

message NodeMasterAckRequestBodyUpload {
    string file_name = 1;
    string file_path = 2;
    string data_node_address = 3;
    string node_id = 4;
    bool status = 5;
    int64 file_size = 6;
    string client_address = 7;
}

message MasterClientAckRequestBodyUpload {
    bool status = 1;
    string message =2;
}

// download methods
message NodeMasterAckRequestBody {
    bool status = 1;
}

message MasterClientAckRequestBody {
    bool status = 1;
}

message DownloadPortsRequestBody{
    string file_name = 1;
}

message DownloadPortsResponseBody{
    repeated string addresses = 1;
    repeated string paths = 2;
    int64 file_size = 3;
}


message DownloadFileResponseBody{
    bytes file_data = 1;
}

message DownloadFileRequestBody{
    string file_name = 1;
    string file_path = 2;
    int64 start = 3;
    int64 end = 4;
    
}


service DFS {
    //upload
    rpc UploadPortsRequest(UploadRequestBody) returns (UploadResponseBody);
    rpc UploadFileRequest(UploadFileRequestBody) returns (Empty);
    rpc NodeMasterAckRequestUpload(NodeMasterAckRequestBodyUpload) returns (Empty);
    rpc MasterClientAckRequestUpload(MasterClientAckRequestBodyUpload) returns (Empty);
    //download
    rpc NodeMasterAckRequest(NodeMasterAckRequestBody) returns (Empty);
    rpc MasterClientAckRequest(MasterClientAckRequestBody) returns (Empty);
    rpc DownloadPortsRequest(DownloadPortsRequestBody) returns (DownloadPortsResponseBody);
    rpc DownloadFileRequest(DownloadFileRequestBody) returns (DownloadFileResponseBody);

}
