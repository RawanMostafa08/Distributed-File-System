// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: upload.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_upload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{0}
}

// upload methods
type UploadRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterAddress string                 `protobuf:"bytes,1,opt,name=master_address,json=masterAddress,proto3" json:"master_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadRequestBody) Reset() {
	*x = UploadRequestBody{}
	mi := &file_upload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequestBody) ProtoMessage() {}

func (x *UploadRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequestBody.ProtoReflect.Descriptor instead.
func (*UploadRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{1}
}

func (x *UploadRequestBody) GetMasterAddress() string {
	if x != nil {
		return x.MasterAddress
	}
	return ""
}

type UploadResponseBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectedPort  string                 `protobuf:"bytes,1,opt,name=selected_port,json=selectedPort,proto3" json:"selected_port,omitempty"`
	DataNode_IP   string                 `protobuf:"bytes,2,opt,name=data_node_IP,json=dataNodeIP,proto3" json:"data_node_IP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponseBody) Reset() {
	*x = UploadResponseBody{}
	mi := &file_upload_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponseBody) ProtoMessage() {}

func (x *UploadResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponseBody.ProtoReflect.Descriptor instead.
func (*UploadResponseBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{2}
}

func (x *UploadResponseBody) GetSelectedPort() string {
	if x != nil {
		return x.SelectedPort
	}
	return ""
}

func (x *UploadResponseBody) GetDataNode_IP() string {
	if x != nil {
		return x.DataNode_IP
	}
	return ""
}

type UploadFileRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeAddress   string                 `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	FileData      []byte                 `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize      int64                  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileRequestBody) Reset() {
	*x = UploadFileRequestBody{}
	mi := &file_upload_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequestBody) ProtoMessage() {}

func (x *UploadFileRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequestBody.ProtoReflect.Descriptor instead.
func (*UploadFileRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{3}
}

func (x *UploadFileRequestBody) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *UploadFileRequestBody) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *UploadFileRequestBody) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadFileRequestBody) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type NodeMasterAckRequestBodyUpload struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FileName        string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath        string                 `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	DataNodeAddress string                 `protobuf:"bytes,3,opt,name=data_node_address,json=dataNodeAddress,proto3" json:"data_node_address,omitempty"`
	NodeId          string                 `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Status          bool                   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	FileSize        int64                  `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NodeMasterAckRequestBodyUpload) Reset() {
	*x = NodeMasterAckRequestBodyUpload{}
	mi := &file_upload_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMasterAckRequestBodyUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMasterAckRequestBodyUpload) ProtoMessage() {}

func (x *NodeMasterAckRequestBodyUpload) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMasterAckRequestBodyUpload.ProtoReflect.Descriptor instead.
func (*NodeMasterAckRequestBodyUpload) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{4}
}

func (x *NodeMasterAckRequestBodyUpload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *NodeMasterAckRequestBodyUpload) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *NodeMasterAckRequestBodyUpload) GetDataNodeAddress() string {
	if x != nil {
		return x.DataNodeAddress
	}
	return ""
}

func (x *NodeMasterAckRequestBodyUpload) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeMasterAckRequestBodyUpload) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *NodeMasterAckRequestBodyUpload) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type MasterClientAckRequestBodyUpload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterClientAckRequestBodyUpload) Reset() {
	*x = MasterClientAckRequestBodyUpload{}
	mi := &file_upload_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterClientAckRequestBodyUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterClientAckRequestBodyUpload) ProtoMessage() {}

func (x *MasterClientAckRequestBodyUpload) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterClientAckRequestBodyUpload.ProtoReflect.Descriptor instead.
func (*MasterClientAckRequestBodyUpload) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{5}
}

func (x *MasterClientAckRequestBodyUpload) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *MasterClientAckRequestBodyUpload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// download methods
type NodeMasterAckRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeMasterAckRequestBody) Reset() {
	*x = NodeMasterAckRequestBody{}
	mi := &file_upload_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMasterAckRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMasterAckRequestBody) ProtoMessage() {}

func (x *NodeMasterAckRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMasterAckRequestBody.ProtoReflect.Descriptor instead.
func (*NodeMasterAckRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{6}
}

func (x *NodeMasterAckRequestBody) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type MasterClientAckRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterClientAckRequestBody) Reset() {
	*x = MasterClientAckRequestBody{}
	mi := &file_upload_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterClientAckRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterClientAckRequestBody) ProtoMessage() {}

func (x *MasterClientAckRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterClientAckRequestBody.ProtoReflect.Descriptor instead.
func (*MasterClientAckRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{7}
}

func (x *MasterClientAckRequestBody) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DownloadPortsRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadPortsRequestBody) Reset() {
	*x = DownloadPortsRequestBody{}
	mi := &file_upload_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadPortsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPortsRequestBody) ProtoMessage() {}

func (x *DownloadPortsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPortsRequestBody.ProtoReflect.Descriptor instead.
func (*DownloadPortsRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadPortsRequestBody) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type DownloadPortsResponseBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Paths         []string               `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	FileSize      int64                  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadPortsResponseBody) Reset() {
	*x = DownloadPortsResponseBody{}
	mi := &file_upload_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadPortsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPortsResponseBody) ProtoMessage() {}

func (x *DownloadPortsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPortsResponseBody.ProtoReflect.Descriptor instead.
func (*DownloadPortsResponseBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadPortsResponseBody) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DownloadPortsResponseBody) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DownloadPortsResponseBody) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type DownloadFileResponseBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileResponseBody) Reset() {
	*x = DownloadFileResponseBody{}
	mi := &file_upload_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResponseBody) ProtoMessage() {}

func (x *DownloadFileResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResponseBody.ProtoReflect.Descriptor instead.
func (*DownloadFileResponseBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadFileResponseBody) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type DownloadFileRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath      string                 `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Start         int64                  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End           int64                  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileRequestBody) Reset() {
	*x = DownloadFileRequestBody{}
	mi := &file_upload_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRequestBody) ProtoMessage() {}

func (x *DownloadFileRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_upload_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRequestBody.ProtoReflect.Descriptor instead.
func (*DownloadFileRequestBody) Descriptor() ([]byte, []int) {
	return file_upload_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadFileRequestBody) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DownloadFileRequestBody) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DownloadFileRequestBody) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DownloadFileRequestBody) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

var File_upload_proto protoreflect.FileDescriptor

var file_upload_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3a, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x12, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd4, 0x01, 0x0a,
	0x1e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x20, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a,
	0x1a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x19,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x32, 0x90, 0x05, 0x0a, 0x03, 0x44, 0x46, 0x53, 0x12, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1a, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0d, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x1a, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0d,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a,
	0x1c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0d, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x0d, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x16, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0d, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x14,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x21, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0x20, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_upload_proto_rawDescOnce sync.Once
	file_upload_proto_rawDescData []byte
)

func file_upload_proto_rawDescGZIP() []byte {
	file_upload_proto_rawDescOnce.Do(func() {
		file_upload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_upload_proto_rawDesc), len(file_upload_proto_rawDesc)))
	})
	return file_upload_proto_rawDescData
}

var file_upload_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_upload_proto_goTypes = []any{
	(*Empty)(nil),                            // 0: Upload.Empty
	(*UploadRequestBody)(nil),                // 1: Upload.UploadRequestBody
	(*UploadResponseBody)(nil),               // 2: Upload.UploadResponseBody
	(*UploadFileRequestBody)(nil),            // 3: Upload.UploadFileRequestBody
	(*NodeMasterAckRequestBodyUpload)(nil),   // 4: Upload.NodeMasterAckRequestBodyUpload
	(*MasterClientAckRequestBodyUpload)(nil), // 5: Upload.MasterClientAckRequestBodyUpload
	(*NodeMasterAckRequestBody)(nil),         // 6: Upload.NodeMasterAckRequestBody
	(*MasterClientAckRequestBody)(nil),       // 7: Upload.MasterClientAckRequestBody
	(*DownloadPortsRequestBody)(nil),         // 8: Upload.DownloadPortsRequestBody
	(*DownloadPortsResponseBody)(nil),        // 9: Upload.DownloadPortsResponseBody
	(*DownloadFileResponseBody)(nil),         // 10: Upload.DownloadFileResponseBody
	(*DownloadFileRequestBody)(nil),          // 11: Upload.DownloadFileRequestBody
}
var file_upload_proto_depIdxs = []int32{
	1,  // 0: Upload.DFS.UploadPortsRequest:input_type -> Upload.UploadRequestBody
	3,  // 1: Upload.DFS.UploadFileRequest:input_type -> Upload.UploadFileRequestBody
	4,  // 2: Upload.DFS.NodeMasterAckRequestUpload:input_type -> Upload.NodeMasterAckRequestBodyUpload
	5,  // 3: Upload.DFS.MasterClientAckRequestUpload:input_type -> Upload.MasterClientAckRequestBodyUpload
	6,  // 4: Upload.DFS.NodeMasterAckRequest:input_type -> Upload.NodeMasterAckRequestBody
	7,  // 5: Upload.DFS.MasterClientAckRequest:input_type -> Upload.MasterClientAckRequestBody
	8,  // 6: Upload.DFS.DownloadPortsRequest:input_type -> Upload.DownloadPortsRequestBody
	11, // 7: Upload.DFS.DownloadFileRequest:input_type -> Upload.DownloadFileRequestBody
	2,  // 8: Upload.DFS.UploadPortsRequest:output_type -> Upload.UploadResponseBody
	0,  // 9: Upload.DFS.UploadFileRequest:output_type -> Upload.Empty
	0,  // 10: Upload.DFS.NodeMasterAckRequestUpload:output_type -> Upload.Empty
	0,  // 11: Upload.DFS.MasterClientAckRequestUpload:output_type -> Upload.Empty
	0,  // 12: Upload.DFS.NodeMasterAckRequest:output_type -> Upload.Empty
	0,  // 13: Upload.DFS.MasterClientAckRequest:output_type -> Upload.Empty
	9,  // 14: Upload.DFS.DownloadPortsRequest:output_type -> Upload.DownloadPortsResponseBody
	10, // 15: Upload.DFS.DownloadFileRequest:output_type -> Upload.DownloadFileResponseBody
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_upload_proto_init() }
func file_upload_proto_init() {
	if File_upload_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_upload_proto_rawDesc), len(file_upload_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_upload_proto_goTypes,
		DependencyIndexes: file_upload_proto_depIdxs,
		MessageInfos:      file_upload_proto_msgTypes,
	}.Build()
	File_upload_proto = out.File
	file_upload_proto_goTypes = nil
	file_upload_proto_depIdxs = nil
}
