// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: replicate.proto

package Replicate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DFS_CopyNotification_FullMethodName = "/replicate.DFS/CopyNotification"
	DFS_CopyFile_FullMethodName         = "/replicate.DFS/CopyFile"
)

// DFSClient is the client API for DFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DFSClient interface {
	CopyNotification(ctx context.Context, in *CopyNotificationRequest, opts ...grpc.CallOption) (*CopyNotificationResponse, error)
	CopyFile(ctx context.Context, in *FileToCopyRequest, opts ...grpc.CallOption) (*FileToCopyResponse, error)
}

type dFSClient struct {
	cc grpc.ClientConnInterface
}

func NewDFSClient(cc grpc.ClientConnInterface) DFSClient {
	return &dFSClient{cc}
}

func (c *dFSClient) CopyNotification(ctx context.Context, in *CopyNotificationRequest, opts ...grpc.CallOption) (*CopyNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyNotificationResponse)
	err := c.cc.Invoke(ctx, DFS_CopyNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) CopyFile(ctx context.Context, in *FileToCopyRequest, opts ...grpc.CallOption) (*FileToCopyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileToCopyResponse)
	err := c.cc.Invoke(ctx, DFS_CopyFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DFSServer is the server API for DFS service.
// All implementations must embed UnimplementedDFSServer
// for forward compatibility.
type DFSServer interface {
	CopyNotification(context.Context, *CopyNotificationRequest) (*CopyNotificationResponse, error)
	CopyFile(context.Context, *FileToCopyRequest) (*FileToCopyResponse, error)
	mustEmbedUnimplementedDFSServer()
}

// UnimplementedDFSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDFSServer struct{}

func (UnimplementedDFSServer) CopyNotification(context.Context, *CopyNotificationRequest) (*CopyNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyNotification not implemented")
}
func (UnimplementedDFSServer) CopyFile(context.Context, *FileToCopyRequest) (*FileToCopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedDFSServer) mustEmbedUnimplementedDFSServer() {}
func (UnimplementedDFSServer) testEmbeddedByValue()             {}

// UnsafeDFSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DFSServer will
// result in compilation errors.
type UnsafeDFSServer interface {
	mustEmbedUnimplementedDFSServer()
}

func RegisterDFSServer(s grpc.ServiceRegistrar, srv DFSServer) {
	// If the following call pancis, it indicates UnimplementedDFSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DFS_ServiceDesc, srv)
}

func _DFS_CopyNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).CopyNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DFS_CopyNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).CopyNotification(ctx, req.(*CopyNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileToCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DFS_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).CopyFile(ctx, req.(*FileToCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DFS_ServiceDesc is the grpc.ServiceDesc for DFS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DFS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replicate.DFS",
	HandlerType: (*DFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyNotification",
			Handler:    _DFS_CopyNotification_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _DFS_CopyFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicate.proto",
}
