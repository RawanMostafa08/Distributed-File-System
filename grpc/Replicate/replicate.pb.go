// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: replicate.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyNotificationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSrc         bool                   `protobuf:"varint,1,opt,name=is_src,json=isSrc,proto3" json:"is_src,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath      string                 `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	DestIp        string                 `protobuf:"bytes,4,opt,name=dest_ip,json=destIp,proto3" json:"dest_ip,omitempty"`
	DestPort      string                 `protobuf:"bytes,5,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyNotificationRequest) Reset() {
	*x = CopyNotificationRequest{}
	mi := &file_replicate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNotificationRequest) ProtoMessage() {}

func (x *CopyNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNotificationRequest.ProtoReflect.Descriptor instead.
func (*CopyNotificationRequest) Descriptor() ([]byte, []int) {
	return file_replicate_proto_rawDescGZIP(), []int{0}
}

func (x *CopyNotificationRequest) GetIsSrc() bool {
	if x != nil {
		return x.IsSrc
	}
	return false
}

func (x *CopyNotificationRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CopyNotificationRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CopyNotificationRequest) GetDestIp() string {
	if x != nil {
		return x.DestIp
	}
	return ""
}

func (x *CopyNotificationRequest) GetDestPort() string {
	if x != nil {
		return x.DestPort
	}
	return ""
}

type CopyNotificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ack           string                 `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyNotificationResponse) Reset() {
	*x = CopyNotificationResponse{}
	mi := &file_replicate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNotificationResponse) ProtoMessage() {}

func (x *CopyNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNotificationResponse.ProtoReflect.Descriptor instead.
func (*CopyNotificationResponse) Descriptor() ([]byte, []int) {
	return file_replicate_proto_rawDescGZIP(), []int{1}
}

func (x *CopyNotificationResponse) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

type CopyFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileData      []byte                 `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFileRequest) Reset() {
	*x = CopyFileRequest{}
	mi := &file_replicate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileRequest) ProtoMessage() {}

func (x *CopyFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileRequest.ProtoReflect.Descriptor instead.
func (*CopyFileRequest) Descriptor() ([]byte, []int) {
	return file_replicate_proto_rawDescGZIP(), []int{2}
}

func (x *CopyFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CopyFileRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type CopyFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ack           string                 `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFileResponse) Reset() {
	*x = CopyFileResponse{}
	mi := &file_replicate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileResponse) ProtoMessage() {}

func (x *CopyFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileResponse.ProtoReflect.Descriptor instead.
func (*CopyFileResponse) Descriptor() ([]byte, []int) {
	return file_replicate_proto_rawDescGZIP(), []int{3}
}

func (x *CopyFileResponse) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

var File_replicate_proto protoreflect.FileDescriptor

const file_replicate_proto_rawDesc = "" +
	"\n" +
	"\x0freplicate.proto\x12\tReplicate\"\xa0\x01\n" +
	"\x17CopyNotificationRequest\x12\x15\n" +
	"\x06is_src\x18\x01 \x01(\bR\x05isSrc\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12\x1b\n" +
	"\tfile_path\x18\x03 \x01(\tR\bfilePath\x12\x17\n" +
	"\adest_ip\x18\x04 \x01(\tR\x06destIp\x12\x1b\n" +
	"\tdest_port\x18\x05 \x01(\tR\bdestPort\",\n" +
	"\x18CopyNotificationResponse\x12\x10\n" +
	"\x03ack\x18\x01 \x01(\tR\x03ack\"K\n" +
	"\x0fCopyFileRequest\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x1b\n" +
	"\tfile_data\x18\x02 \x01(\fR\bfileData\"$\n" +
	"\x10CopyFileResponse\x12\x10\n" +
	"\x03ack\x18\x01 \x01(\tR\x03ack2\xa7\x01\n" +
	"\x03DFS\x12[\n" +
	"\x10CopyNotification\x12\".Replicate.CopyNotificationRequest\x1a#.Replicate.CopyNotificationResponse\x12C\n" +
	"\bCopyFile\x12\x1a.Replicate.CopyFileRequest\x1a\x1b.Replicate.CopyFileResponseB\x03Z\x01/b\x06proto3"

var (
	file_replicate_proto_rawDescOnce sync.Once
	file_replicate_proto_rawDescData []byte
)

func file_replicate_proto_rawDescGZIP() []byte {
	file_replicate_proto_rawDescOnce.Do(func() {
		file_replicate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_replicate_proto_rawDesc), len(file_replicate_proto_rawDesc)))
	})
	return file_replicate_proto_rawDescData
}

var file_replicate_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_replicate_proto_goTypes = []any{
	(*CopyNotificationRequest)(nil),  // 0: Replicate.CopyNotificationRequest
	(*CopyNotificationResponse)(nil), // 1: Replicate.CopyNotificationResponse
	(*CopyFileRequest)(nil),          // 2: Replicate.CopyFileRequest
	(*CopyFileResponse)(nil),         // 3: Replicate.CopyFileResponse
}
var file_replicate_proto_depIdxs = []int32{
	0, // 0: Replicate.DFS.CopyNotification:input_type -> Replicate.CopyNotificationRequest
	2, // 1: Replicate.DFS.CopyFile:input_type -> Replicate.CopyFileRequest
	1, // 2: Replicate.DFS.CopyNotification:output_type -> Replicate.CopyNotificationResponse
	3, // 3: Replicate.DFS.CopyFile:output_type -> Replicate.CopyFileResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_replicate_proto_init() }
func file_replicate_proto_init() {
	if File_replicate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_replicate_proto_rawDesc), len(file_replicate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replicate_proto_goTypes,
		DependencyIndexes: file_replicate_proto_depIdxs,
		MessageInfos:      file_replicate_proto_msgTypes,
	}.Build()
	File_replicate_proto = out.File
	file_replicate_proto_goTypes = nil
	file_replicate_proto_depIdxs = nil
}
